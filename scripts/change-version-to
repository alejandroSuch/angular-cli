#!/bin/bash

switch_to_branch() {
  local BRANCH=$1

  git checkout $BRANCH
  git pull origin $BRANCH
}

replace_files_with() {
  local VERSION=$1
  local SUFFIX=""

  if [ ! -z "$2" ]; then
    SUFFIX=$2
  fi

  sed -i -E "s:\(@angular/cli@\).*\(\s*\\\\\):\1$VERSION \2:" Dockerfile
  sed -i -E "s/\(@angular\/cli:\*\*\).*\(<br\/>\)/\1 $VERSION\2/" README.md
  sed -i -E "s/\(alexsuch\/angular-cli:\).*\(ng\)/\1$VERSION$SUFFIX \2/" README.md
}

build_docker() {
  local VERSION=$1
  local SUFFIX=""

  if [ ! -z "$2" ]; then
    SUFFIX=$2
  fi

  docker build -t alexsuch/angular-cli:$VERSION$SUFFIX .
  return $?
}

on_success() {
  local VERSION=$1
  local BRANCHNAME=$2
  local SUFFIX=""

  if [ ! -z "$3" ]; then
    SUFFIX=$3
  fi

  local DEFAULT_MSG="Update CLI version to $VERSION$SUFFIX"

  clear
  echo "Success!"
  echo "Sending changes to github"
  echo "Default message will be '$DEFAULT_MSG'"
  read -p "Write your message (Hit ENTER for default message): " COMMIT_MSG

  if [[ -z "$COMMIT_MSG" ]]; then
    COMMIT_MSG=$DEFAULT_MSG
  fi

  echo "Committing files"
  git add Dockerfile README.md
  git commit -m "$COMMIT_MSG"
  git tag -a $VERSION$SUFFIX -m "version $VERSION$SUFFIX"

  echo "Pushing to Github"
  git push origin $BRANCHNAME

  echo "Generating release $VERSION$SUFFIX"
  curl --data "{\"tag_name\": \"$VERSION$SUFFIX\",
              \"target_commitish\": \"$BRANCHNAME\",
              \"name\": \"v$VERSION$SUFFIX\",
              \"body\": \"Release of version $VERSION$SUFFIX\",
              \"draft\": false,
              \"prerelease\": false}" \
  https://api.github.com/repos/alejandroSuch/angular-cli/releases?access_token=$GITHUB_ACCESS_TOKEN

  echo "Success!"
}

on_error() {
  clear
  echo "Docker build failed!"
  exit 1
}

if [ $# -eq 0 ]; then
    echo "Version is required"
    exit 1
fi

VERSION=$1
BRANCHNAME=""
## STANDARD VERSION

if [[ $VERSION == 1.3.* ]]; then
  BRANCHNAME="1.3.x"
elif [[ $VERSION == 1.4.* ]]; then
  BRANCHNAME="1.4.x"
elif [[ $VERSION == 1.5.* ]]; then
  BRANCHNAME="1.5.x"
elif [[ $VERSION == 1.6.* ]]; then
  BRANCHNAME="1.6.x"
elif [[ $VERSION == 1.7.* ]]; then
  BRANCHNAME="1.7.x"
elif [[ $VERSION == 6.0.* ]]; then
  BRANCHNAME="6.0.x"
elif [[ $VERSION == 6.1.* ]]; then
  BRANCHNAME="6.1.x"
elif [[ $VERSION == 6.2.* ]]; then
  BRANCHNAME="6.2.x"
elif [[ $VERSION == 7.0.* ]]; then
  BRANCHNAME="7.0.x"
elif [[ $VERSION == 7.3.* ]]; then
  BRANCHNAME="7.3.x"
fi

switch_to_branch $BRANCHNAME
replace_files_with $VERSION
build_docker $VERSION
DOCKER_BUILD_RESULT=$?

if [ $DOCKER_BUILD_RESULT -eq 0 ]; then
  on_success $VERSION $BRANCHNAME
else
  on_error
fi

## CHROMIUM VERSION

if [[ $VERSION == 1.3.* ]]; then
  BRANCHNAME="1.3.x-chromium"
elif [[ $VERSION == 1.4.* ]]; then
  BRANCHNAME="1.4.x-chromium"
elif [[ $VERSION == 1.5.* ]]; then
  BRANCHNAME="1.5.x-chromium"
elif [[ $VERSION == 1.6.* ]]; then
  BRANCHNAME="1.6.x-chromium"
elif [[ $VERSION == 1.7.* ]]; then
  BRANCHNAME="1.7.x-chromium"
elif [[ $VERSION == 6.0.* ]]; then
  BRANCHNAME="6.0.x-chromium"
elif [[ $VERSION == 6.1.* ]]; then
  BRANCHNAME="6.1.x-chromium"
elif [[ $VERSION == 6.2.* ]]; then
  BRANCHNAME="6.2.x-chromium"
elif [[ $VERSION == 7.0.* ]]; then
  BRANCHNAME="7.0.x-chromium"
elif [[ $VERSION == 7.3.* ]]; then
  BRANCHNAME="7.3.x-chromium"
fi

switch_to_branch $BRANCHNAME
replace_files_with $VERSION "-chromium"
build_docker $VERSION "-chromium"
DOCKER_BUILD_RESULT=$?

if [ $DOCKER_BUILD_RESULT -eq 0 ]; then
  on_success $VERSION $BRANCHNAME "-chromium"
else
  on_error
fi

switch_to_branch "master"
